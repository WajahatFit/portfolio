{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.anykey = exports.confirm = exports.prompt = void 0;\nconst Errors = require(\"../errors\");\nconst chalk = require(\"chalk\");\nconst config_1 = require(\"./config\");\nconst deps_1 = require(\"./deps\");\nfunction normal(options) {\n  let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  if (retries < 0) throw new Error('no input');\n  return new Promise((resolve, reject) => {\n    let timer;\n    if (options.timeout) {\n      timer = setTimeout(() => {\n        process.stdin.pause();\n        reject(new Error('Prompt timeout'));\n      }, options.timeout);\n      timer.unref();\n    }\n    process.stdin.setEncoding('utf8');\n    process.stderr.write(options.prompt);\n    process.stdin.resume();\n    process.stdin.once('data', b => {\n      if (timer) clearTimeout(timer);\n      process.stdin.pause();\n      const data = (typeof b === 'string' ? b : b.toString()).trim();\n      if (!options.default && options.required && data === '') {\n        resolve(normal(options, retries - 1));\n      } else {\n        resolve(data || options.default);\n      }\n    });\n  });\n}\nfunction getPrompt(name, type, defaultValue) {\n  let prompt = '> ';\n  if (defaultValue && type === 'hide') {\n    defaultValue = '*'.repeat(defaultValue.length);\n  }\n  if (name && defaultValue) prompt = name + ' ' + chalk.yellow('[' + defaultValue + ']') + ': ';else if (name) prompt = `${name}: `;\n  return prompt;\n}\nasync function single(options) {\n  const raw = process.stdin.isRaw;\n  if (process.stdin.setRawMode) process.stdin.setRawMode(true);\n  options.required = options.required ?? false;\n  const response = await normal(options);\n  if (process.stdin.setRawMode) process.stdin.setRawMode(Boolean(raw));\n  return response;\n}\nfunction replacePrompt(prompt) {\n  process.stderr.write(deps_1.default.ansiEscapes.cursorHide + deps_1.default.ansiEscapes.cursorUp(1) + deps_1.default.ansiEscapes.cursorLeft + prompt + deps_1.default.ansiEscapes.cursorDown(1) + deps_1.default.ansiEscapes.cursorLeft + deps_1.default.ansiEscapes.cursorShow);\n}\nfunction _prompt(name) {\n  let inputOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const prompt = getPrompt(name, inputOptions.type, inputOptions.default);\n  const options = {\n    isTTY: Boolean(process.env.TERM !== 'dumb' && process.stdin.isTTY),\n    name,\n    prompt,\n    type: 'normal',\n    required: true,\n    default: '',\n    ...inputOptions\n  };\n  switch (options.type) {\n    case 'normal':\n      return normal(options);\n    case 'single':\n      return single(options);\n    case 'mask':\n      return deps_1.default.passwordPrompt(options.prompt, {\n        method: options.type,\n        required: options.required,\n        default: options.default\n      }).then(value => {\n        replacePrompt(getPrompt(name, 'hide', inputOptions.default));\n        return value;\n      });\n    case 'hide':\n      return deps_1.default.passwordPrompt(options.prompt, {\n        method: options.type,\n        required: options.required,\n        default: options.default\n      });\n    default:\n      throw new Error(`unexpected type ${options.type}`);\n  }\n}\n/**\n * prompt for input\n * @param name - prompt text\n * @param options - @see IPromptOptions\n * @returns void\n */\nfunction prompt(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return config_1.default.action.pauseAsync(() => {\n    return _prompt(name, options);\n  }, chalk.cyan('?'));\n}\nexports.prompt = prompt;\n/**\n * confirmation prompt (yes/no)\n * @param message - confirmation text\n * @returns Promise<boolean>\n */\nfunction confirm(message) {\n  return config_1.default.action.pauseAsync(async () => {\n    const confirm = async () => {\n      const response = (await _prompt(message)).toLowerCase();\n      if (['n', 'no'].includes(response)) return false;\n      if (['y', 'yes'].includes(response)) return true;\n      return confirm();\n    };\n    return confirm();\n  }, chalk.cyan('?'));\n}\nexports.confirm = confirm;\n/**\n * \"press anykey to continue\"\n * @param message - optional message to display to user\n * @returns Promise<void>\n */\nasync function anykey(message) {\n  const tty = Boolean(process.stdin.setRawMode);\n  if (!message) {\n    message = tty ? `Press any key to continue or ${chalk.yellow('q')} to exit` : `Press enter to continue or ${chalk.yellow('q')} to exit`;\n  }\n  const char = await prompt(message, {\n    type: 'single',\n    required: false\n  });\n  if (tty) process.stderr.write('\\n');\n  if (char === 'q') Errors.error('quit');\n  if (char === '\\u0003') Errors.error('ctrl-c');\n  return char;\n}\nexports.anykey = anykey;","map":{"version":3,"names":["Object","defineProperty","exports","value","anykey","confirm","prompt","Errors","require","chalk","config_1","deps_1","normal","options","retries","Error","Promise","resolve","reject","timer","timeout","setTimeout","process","stdin","pause","unref","setEncoding","stderr","write","resume","once","b","clearTimeout","data","toString","trim","default","required","getPrompt","name","type","defaultValue","repeat","length","yellow","single","raw","isRaw","setRawMode","response","Boolean","replacePrompt","ansiEscapes","cursorHide","cursorUp","cursorLeft","cursorDown","cursorShow","_prompt","inputOptions","isTTY","env","TERM","passwordPrompt","method","then","action","pauseAsync","cyan","message","toLowerCase","includes","tty","char","error"],"sources":["/Users/wajahatfit/Documents/labs/portfolio/portfolio/node_modules/@oclif/core/lib/cli-ux/prompt.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.anykey = exports.confirm = exports.prompt = void 0;\nconst Errors = require(\"../errors\");\nconst chalk = require(\"chalk\");\nconst config_1 = require(\"./config\");\nconst deps_1 = require(\"./deps\");\nfunction normal(options, retries = 100) {\n    if (retries < 0)\n        throw new Error('no input');\n    return new Promise((resolve, reject) => {\n        let timer;\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                process.stdin.pause();\n                reject(new Error('Prompt timeout'));\n            }, options.timeout);\n            timer.unref();\n        }\n        process.stdin.setEncoding('utf8');\n        process.stderr.write(options.prompt);\n        process.stdin.resume();\n        process.stdin.once('data', b => {\n            if (timer)\n                clearTimeout(timer);\n            process.stdin.pause();\n            const data = (typeof b === 'string' ? b : b.toString()).trim();\n            if (!options.default && options.required && data === '') {\n                resolve(normal(options, retries - 1));\n            }\n            else {\n                resolve(data || options.default);\n            }\n        });\n    });\n}\nfunction getPrompt(name, type, defaultValue) {\n    let prompt = '> ';\n    if (defaultValue && type === 'hide') {\n        defaultValue = '*'.repeat(defaultValue.length);\n    }\n    if (name && defaultValue)\n        prompt = name + ' ' + chalk.yellow('[' + defaultValue + ']') + ': ';\n    else if (name)\n        prompt = `${name}: `;\n    return prompt;\n}\nasync function single(options) {\n    const raw = process.stdin.isRaw;\n    if (process.stdin.setRawMode)\n        process.stdin.setRawMode(true);\n    options.required = options.required ?? false;\n    const response = await normal(options);\n    if (process.stdin.setRawMode)\n        process.stdin.setRawMode(Boolean(raw));\n    return response;\n}\nfunction replacePrompt(prompt) {\n    process.stderr.write(deps_1.default.ansiEscapes.cursorHide + deps_1.default.ansiEscapes.cursorUp(1) + deps_1.default.ansiEscapes.cursorLeft + prompt +\n        deps_1.default.ansiEscapes.cursorDown(1) + deps_1.default.ansiEscapes.cursorLeft + deps_1.default.ansiEscapes.cursorShow);\n}\nfunction _prompt(name, inputOptions = {}) {\n    const prompt = getPrompt(name, inputOptions.type, inputOptions.default);\n    const options = {\n        isTTY: Boolean(process.env.TERM !== 'dumb' && process.stdin.isTTY),\n        name,\n        prompt,\n        type: 'normal',\n        required: true,\n        default: '',\n        ...inputOptions,\n    };\n    switch (options.type) {\n        case 'normal':\n            return normal(options);\n        case 'single':\n            return single(options);\n        case 'mask':\n            return deps_1.default.passwordPrompt(options.prompt, {\n                method: options.type,\n                required: options.required,\n                default: options.default,\n            }).then((value) => {\n                replacePrompt(getPrompt(name, 'hide', inputOptions.default));\n                return value;\n            });\n        case 'hide':\n            return deps_1.default.passwordPrompt(options.prompt, {\n                method: options.type,\n                required: options.required,\n                default: options.default,\n            });\n        default:\n            throw new Error(`unexpected type ${options.type}`);\n    }\n}\n/**\n * prompt for input\n * @param name - prompt text\n * @param options - @see IPromptOptions\n * @returns void\n */\nfunction prompt(name, options = {}) {\n    return config_1.default.action.pauseAsync(() => {\n        return _prompt(name, options);\n    }, chalk.cyan('?'));\n}\nexports.prompt = prompt;\n/**\n * confirmation prompt (yes/no)\n * @param message - confirmation text\n * @returns Promise<boolean>\n */\nfunction confirm(message) {\n    return config_1.default.action.pauseAsync(async () => {\n        const confirm = async () => {\n            const response = (await _prompt(message)).toLowerCase();\n            if (['n', 'no'].includes(response))\n                return false;\n            if (['y', 'yes'].includes(response))\n                return true;\n            return confirm();\n        };\n        return confirm();\n    }, chalk.cyan('?'));\n}\nexports.confirm = confirm;\n/**\n * \"press anykey to continue\"\n * @param message - optional message to display to user\n * @returns Promise<void>\n */\nasync function anykey(message) {\n    const tty = Boolean(process.stdin.setRawMode);\n    if (!message) {\n        message = tty ?\n            `Press any key to continue or ${chalk.yellow('q')} to exit` :\n            `Press enter to continue or ${chalk.yellow('q')} to exit`;\n    }\n    const char = await prompt(message, { type: 'single', required: false });\n    if (tty)\n        process.stderr.write('\\n');\n    if (char === 'q')\n        Errors.error('quit');\n    if (char === '\\u0003')\n        Errors.error('ctrl-c');\n    return char;\n}\nexports.anykey = anykey;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}