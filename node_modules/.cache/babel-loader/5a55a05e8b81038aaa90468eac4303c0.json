{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandHelp = void 0;\nconst Chalk = require(\"chalk\");\nconst stripAnsi = require(\"strip-ansi\");\nconst util_1 = require(\"../util\");\nconst formatter_1 = require(\"./formatter\");\nconst docopts_1 = require(\"./docopts\");\n// Don't use os.EOL because we need to ensure that a string\n// written on any platform, that may use \\r\\n or \\n, will be\n// split on any platform, not just the os specific EOL at runtime.\nconst POSSIBLE_LINE_FEED = /\\r\\n|\\n/;\nconst {\n  underline\n} = Chalk;\nlet {\n  dim\n} = Chalk;\nif (process.env.ConEmuANSI === 'ON') {\n  // eslint-disable-next-line unicorn/consistent-destructuring\n  dim = Chalk.gray;\n}\nclass CommandHelp extends formatter_1.HelpFormatter {\n  constructor(command, config, opts) {\n    super(config, opts);\n    this.command = command;\n    this.config = config;\n    this.opts = opts;\n  }\n  generate() {\n    const cmd = this.command;\n    const flags = (0, util_1.sortBy)(Object.entries(cmd.flags || {}).filter(_ref => {\n      let [, v] = _ref;\n      return !v.hidden;\n    }).map(_ref2 => {\n      let [k, v] = _ref2;\n      v.name = k;\n      return v;\n    }), f => [!f.char, f.char, f.name]);\n    const args = (cmd.args || []).filter(a => !a.hidden);\n    const output = (0, util_1.compact)(this.sections().map(_ref3 => {\n      let {\n        header,\n        generate\n      } = _ref3;\n      const body = generate({\n        cmd,\n        flags,\n        args\n      }, header);\n      // Generate can return a list of sections\n      if (Array.isArray(body)) {\n        return body.map(helpSection => helpSection && helpSection.body && this.section(helpSection.header, helpSection.body)).join('\\n\\n');\n      }\n      return body && this.section(header, body);\n    })).join('\\n\\n');\n    return output;\n  }\n  groupFlags(flags) {\n    const mainFlags = [];\n    const flagGroups = {};\n    for (const flag of flags) {\n      const group = flag.helpGroup;\n      if (group) {\n        if (!flagGroups[group]) flagGroups[group] = [];\n        flagGroups[group].push(flag);\n      } else {\n        mainFlags.push(flag);\n      }\n    }\n    return {\n      mainFlags,\n      flagGroups\n    };\n  }\n  sections() {\n    return [{\n      header: this.opts.usageHeader || 'USAGE',\n      generate: () => this.usage()\n    }, {\n      header: 'ARGUMENTS',\n      generate: (_ref4, header) => {\n        let {\n          args\n        } = _ref4;\n        return [{\n          header,\n          body: this.args(args)\n        }];\n      }\n    }, {\n      header: 'FLAGS',\n      generate: (_ref5, header) => {\n        let {\n          flags\n        } = _ref5;\n        const {\n          mainFlags,\n          flagGroups\n        } = this.groupFlags(flags);\n        const flagSections = [];\n        const mainFlagBody = this.flags(mainFlags);\n        if (mainFlagBody) flagSections.push({\n          header,\n          body: mainFlagBody\n        });\n        for (const [name, flags] of Object.entries(flagGroups)) {\n          const body = this.flags(flags);\n          if (body) flagSections.push({\n            header: `${name.toUpperCase()} ${header}`,\n            body\n          });\n        }\n        return (0, util_1.compact)(flagSections);\n      }\n    }, {\n      header: 'DESCRIPTION',\n      generate: () => this.description()\n    }, {\n      header: 'ALIASES',\n      generate: _ref6 => {\n        let {\n          cmd\n        } = _ref6;\n        return this.aliases(cmd.aliases);\n      }\n    }, {\n      header: 'EXAMPLES',\n      generate: _ref7 => {\n        let {\n          cmd\n        } = _ref7;\n        const examples = cmd.examples || cmd.example;\n        return this.examples(examples);\n      }\n    }, {\n      header: 'FLAG DESCRIPTIONS',\n      generate: _ref8 => {\n        let {\n          flags\n        } = _ref8;\n        return this.flagsDescriptions(flags);\n      }\n    }];\n  }\n  usage() {\n    const usage = this.command.usage;\n    const body = (usage ? (0, util_1.castArray)(usage) : [this.defaultUsage()]).map(u => {\n      const allowedSpacing = this.opts.maxWidth - this.indentSpacing;\n      const line = `$ ${this.config.bin} ${u}`.trim();\n      if (line.length > allowedSpacing) {\n        const splitIndex = line.slice(0, Math.max(0, allowedSpacing)).lastIndexOf(' ');\n        return line.slice(0, Math.max(0, splitIndex)) + '\\n' + this.indent(this.wrap(line.slice(Math.max(0, splitIndex)), this.indentSpacing * 2));\n      }\n      return this.wrap(line);\n    }).join('\\n');\n    return body;\n  }\n  defaultUsage() {\n    // Docopts by default\n    if (this.opts.docopts === undefined || this.opts.docopts) {\n      return docopts_1.DocOpts.generate(this.command);\n    }\n    return (0, util_1.compact)([this.command.id, this.command.args.filter(a => !a.hidden).map(a => this.arg(a)).join(' ')]).join(' ');\n  }\n  description() {\n    const cmd = this.command;\n    let description;\n    if (this.opts.hideCommandSummaryInDescription) {\n      description = (cmd.description || '').split(POSSIBLE_LINE_FEED).slice(1);\n    } else if (cmd.description) {\n      const summary = cmd.summary ? `${cmd.summary}\\n` : null;\n      description = summary ? [...summary.split(POSSIBLE_LINE_FEED), ...(cmd.description || '').split(POSSIBLE_LINE_FEED)] : (cmd.description || '').split(POSSIBLE_LINE_FEED);\n    }\n    if (description) {\n      return this.wrap(description.join('\\n'));\n    }\n  }\n  aliases(aliases) {\n    if (!aliases || aliases.length === 0) return;\n    const body = aliases.map(a => ['$', this.config.bin, a].join(' ')).join('\\n');\n    return body;\n  }\n  examples(examples) {\n    if (!examples || examples.length === 0) return;\n    const formatIfCommand = example => {\n      example = this.render(example);\n      if (example.startsWith(this.config.bin)) return dim(`$ ${example}`);\n      if (example.startsWith(`$ ${this.config.bin}`)) return dim(example);\n      return example;\n    };\n    const isCommand = example => stripAnsi(formatIfCommand(example)).startsWith(`$ ${this.config.bin}`);\n    const body = (0, util_1.castArray)(examples).map(a => {\n      let description;\n      let commands;\n      if (typeof a === 'string') {\n        const lines = a.split(POSSIBLE_LINE_FEED).filter(line => Boolean(line));\n        // If the example is <description>\\n<command> then format correctly\n        // eslint-disable-next-line unicorn/no-array-callback-reference\n        if (lines.length >= 2 && !isCommand(lines[0]) && lines.slice(1).every(isCommand)) {\n          description = lines[0];\n          commands = lines.slice(1);\n        } else {\n          return lines.map(line => formatIfCommand(line)).join('\\n');\n        }\n      } else {\n        description = a.description;\n        commands = [a.command];\n      }\n      const multilineSeparator = this.config.platform === 'win32' ? this.config.shell.includes('powershell') ? '`' : '^' : '\\\\';\n      // The command will be indented in the section, which is also indented\n      const finalIndentedSpacing = this.indentSpacing * 2;\n      const multilineCommands = commands.map(c => {\n        // First indent keeping room for escaped newlines\n        return this.indent(this.wrap(formatIfCommand(c), finalIndentedSpacing + 4))\n        // Then add the escaped newline\n        .split(POSSIBLE_LINE_FEED).join(` ${multilineSeparator}\\n  `);\n      }).join('\\n');\n      return `${this.wrap(description, finalIndentedSpacing)}\\n\\n${multilineCommands}`;\n    }).join('\\n\\n');\n    return body;\n  }\n  args(args) {\n    if (args.filter(a => a.description).length === 0) return;\n    return args.map(a => {\n      const name = a.name.toUpperCase();\n      let description = a.description || '';\n      if (a.default) description = `[default: ${a.default}] ${description}`;\n      if (a.options) description = `(${a.options.join('|')}) ${description}`;\n      return [name, description ? dim(description) : undefined];\n    });\n  }\n  arg(arg) {\n    const name = arg.name.toUpperCase();\n    if (arg.required) return `${name}`;\n    return `[${name}]`;\n  }\n  flagHelpLabel(flag) {\n    let showOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let label = flag.helpLabel;\n    if (!label) {\n      const labels = [];\n      if (flag.char) labels.push(`-${flag.char[0]}`);\n      if (flag.name) {\n        if (flag.type === 'boolean' && flag.allowNo) {\n          labels.push(`--[no-]${flag.name.trim()}`);\n        } else {\n          labels.push(`--${flag.name.trim()}`);\n        }\n      }\n      label = labels.join(', ');\n    }\n    if (flag.type === 'option') {\n      let value = flag.helpValue || (this.opts.showFlagNameInTitle ? flag.name : '<value>');\n      if (!flag.helpValue && flag.options) {\n        value = showOptions || this.opts.showFlagOptionsInTitle ? `${flag.options.join('|')}` : '<option>';\n      }\n      if (flag.multiple) value += '...';\n      if (!value.includes('|')) value = underline(value);\n      label += `=${value}`;\n    }\n    return label;\n  }\n  flags(flags) {\n    if (flags.length === 0) return;\n    return flags.map(flag => {\n      const left = this.flagHelpLabel(flag);\n      let right = flag.summary || flag.description || '';\n      if (flag.type === 'option' && flag.default) {\n        right = `[default: ${flag.default}] ${right}`;\n      }\n      if (flag.required) right = `(required) ${right}`;\n      if (flag.type === 'option' && flag.options && !flag.helpValue && !this.opts.showFlagOptionsInTitle) {\n        right += `\\n<options: ${flag.options.join('|')}>`;\n      }\n      return [left, dim(right.trim())];\n    });\n  }\n  flagsDescriptions(flags) {\n    const flagsWithExtendedDescriptions = flags.filter(flag => flag.summary && flag.description);\n    if (flagsWithExtendedDescriptions.length === 0) return;\n    const body = flagsWithExtendedDescriptions.map(flag => {\n      // Guaranteed to be set because of the filter above, but make ts happy\n      const summary = flag.summary || '';\n      let flagHelp = this.flagHelpLabel(flag, true);\n      flagHelp += flagHelp.length + summary.length + 2 < this.opts.maxWidth ? '  ' + summary : '\\n\\n' + this.indent(this.wrap(summary, this.indentSpacing * 2));\n      return `${flagHelp}\\n\\n${this.indent(this.wrap(flag.description || '', this.indentSpacing * 2))}`;\n    }).join('\\n\\n');\n    return body;\n  }\n}\nexports.CommandHelp = CommandHelp;\nexports.default = CommandHelp;","map":{"version":3,"names":["Object","defineProperty","exports","value","CommandHelp","Chalk","require","stripAnsi","util_1","formatter_1","docopts_1","POSSIBLE_LINE_FEED","underline","dim","process","env","ConEmuANSI","gray","HelpFormatter","constructor","command","config","opts","generate","cmd","flags","sortBy","entries","filter","v","hidden","map","k","name","f","char","args","a","output","compact","sections","header","body","Array","isArray","helpSection","section","join","groupFlags","mainFlags","flagGroups","flag","group","helpGroup","push","usageHeader","usage","flagSections","mainFlagBody","toUpperCase","description","aliases","examples","example","flagsDescriptions","castArray","defaultUsage","u","allowedSpacing","maxWidth","indentSpacing","line","bin","trim","length","splitIndex","slice","Math","max","lastIndexOf","indent","wrap","docopts","undefined","DocOpts","id","arg","hideCommandSummaryInDescription","split","summary","formatIfCommand","render","startsWith","isCommand","commands","lines","Boolean","every","multilineSeparator","platform","shell","includes","finalIndentedSpacing","multilineCommands","c","default","options","required","flagHelpLabel","showOptions","label","helpLabel","labels","type","allowNo","helpValue","showFlagNameInTitle","showFlagOptionsInTitle","multiple","left","right","flagsWithExtendedDescriptions","flagHelp"],"sources":["/Users/wajahatfit/Documents/labs/portfolio/portfolio/node_modules/@oclif/core/lib/help/command.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommandHelp = void 0;\nconst Chalk = require(\"chalk\");\nconst stripAnsi = require(\"strip-ansi\");\nconst util_1 = require(\"../util\");\nconst formatter_1 = require(\"./formatter\");\nconst docopts_1 = require(\"./docopts\");\n// Don't use os.EOL because we need to ensure that a string\n// written on any platform, that may use \\r\\n or \\n, will be\n// split on any platform, not just the os specific EOL at runtime.\nconst POSSIBLE_LINE_FEED = /\\r\\n|\\n/;\nconst { underline, } = Chalk;\nlet { dim, } = Chalk;\nif (process.env.ConEmuANSI === 'ON') {\n    // eslint-disable-next-line unicorn/consistent-destructuring\n    dim = Chalk.gray;\n}\nclass CommandHelp extends formatter_1.HelpFormatter {\n    constructor(command, config, opts) {\n        super(config, opts);\n        this.command = command;\n        this.config = config;\n        this.opts = opts;\n    }\n    generate() {\n        const cmd = this.command;\n        const flags = (0, util_1.sortBy)(Object.entries(cmd.flags || {})\n            .filter(([, v]) => !v.hidden)\n            .map(([k, v]) => {\n            v.name = k;\n            return v;\n        }), f => [!f.char, f.char, f.name]);\n        const args = (cmd.args || []).filter(a => !a.hidden);\n        const output = (0, util_1.compact)(this.sections().map(({ header, generate }) => {\n            const body = generate({ cmd, flags, args }, header);\n            // Generate can return a list of sections\n            if (Array.isArray(body)) {\n                return body.map(helpSection => helpSection && helpSection.body && this.section(helpSection.header, helpSection.body)).join('\\n\\n');\n            }\n            return body && this.section(header, body);\n        })).join('\\n\\n');\n        return output;\n    }\n    groupFlags(flags) {\n        const mainFlags = [];\n        const flagGroups = {};\n        for (const flag of flags) {\n            const group = flag.helpGroup;\n            if (group) {\n                if (!flagGroups[group])\n                    flagGroups[group] = [];\n                flagGroups[group].push(flag);\n            }\n            else {\n                mainFlags.push(flag);\n            }\n        }\n        return { mainFlags, flagGroups };\n    }\n    sections() {\n        return [\n            {\n                header: this.opts.usageHeader || 'USAGE',\n                generate: () => this.usage(),\n            },\n            {\n                header: 'ARGUMENTS',\n                generate: ({ args }, header) => [{ header, body: this.args(args) }],\n            },\n            {\n                header: 'FLAGS',\n                generate: ({ flags }, header) => {\n                    const { mainFlags, flagGroups } = this.groupFlags(flags);\n                    const flagSections = [];\n                    const mainFlagBody = this.flags(mainFlags);\n                    if (mainFlagBody)\n                        flagSections.push({ header, body: mainFlagBody });\n                    for (const [name, flags] of Object.entries(flagGroups)) {\n                        const body = this.flags(flags);\n                        if (body)\n                            flagSections.push({ header: `${name.toUpperCase()} ${header}`, body });\n                    }\n                    return (0, util_1.compact)(flagSections);\n                },\n            },\n            {\n                header: 'DESCRIPTION',\n                generate: () => this.description(),\n            },\n            {\n                header: 'ALIASES',\n                generate: ({ cmd }) => this.aliases(cmd.aliases),\n            },\n            {\n                header: 'EXAMPLES',\n                generate: ({ cmd }) => {\n                    const examples = cmd.examples || cmd.example;\n                    return this.examples(examples);\n                },\n            },\n            {\n                header: 'FLAG DESCRIPTIONS',\n                generate: ({ flags }) => this.flagsDescriptions(flags),\n            },\n        ];\n    }\n    usage() {\n        const usage = this.command.usage;\n        const body = (usage ? (0, util_1.castArray)(usage) : [this.defaultUsage()])\n            .map(u => {\n            const allowedSpacing = this.opts.maxWidth - this.indentSpacing;\n            const line = `$ ${this.config.bin} ${u}`.trim();\n            if (line.length > allowedSpacing) {\n                const splitIndex = line.slice(0, Math.max(0, allowedSpacing)).lastIndexOf(' ');\n                return line.slice(0, Math.max(0, splitIndex)) + '\\n' +\n                    this.indent(this.wrap(line.slice(Math.max(0, splitIndex)), this.indentSpacing * 2));\n            }\n            return this.wrap(line);\n        })\n            .join('\\n');\n        return body;\n    }\n    defaultUsage() {\n        // Docopts by default\n        if (this.opts.docopts === undefined || this.opts.docopts) {\n            return docopts_1.DocOpts.generate(this.command);\n        }\n        return (0, util_1.compact)([\n            this.command.id,\n            this.command.args.filter(a => !a.hidden).map(a => this.arg(a)).join(' '),\n        ]).join(' ');\n    }\n    description() {\n        const cmd = this.command;\n        let description;\n        if (this.opts.hideCommandSummaryInDescription) {\n            description = (cmd.description || '').split(POSSIBLE_LINE_FEED).slice(1);\n        }\n        else if (cmd.description) {\n            const summary = cmd.summary ? `${cmd.summary}\\n` : null;\n            description = summary ? [\n                ...summary.split(POSSIBLE_LINE_FEED),\n                ...(cmd.description || '').split(POSSIBLE_LINE_FEED),\n            ] : (cmd.description || '').split(POSSIBLE_LINE_FEED);\n        }\n        if (description) {\n            return this.wrap(description.join('\\n'));\n        }\n    }\n    aliases(aliases) {\n        if (!aliases || aliases.length === 0)\n            return;\n        const body = aliases.map(a => ['$', this.config.bin, a].join(' ')).join('\\n');\n        return body;\n    }\n    examples(examples) {\n        if (!examples || examples.length === 0)\n            return;\n        const formatIfCommand = (example) => {\n            example = this.render(example);\n            if (example.startsWith(this.config.bin))\n                return dim(`$ ${example}`);\n            if (example.startsWith(`$ ${this.config.bin}`))\n                return dim(example);\n            return example;\n        };\n        const isCommand = (example) => stripAnsi(formatIfCommand(example)).startsWith(`$ ${this.config.bin}`);\n        const body = (0, util_1.castArray)(examples).map(a => {\n            let description;\n            let commands;\n            if (typeof a === 'string') {\n                const lines = a\n                    .split(POSSIBLE_LINE_FEED)\n                    .filter(line => Boolean(line));\n                // If the example is <description>\\n<command> then format correctly\n                // eslint-disable-next-line unicorn/no-array-callback-reference\n                if (lines.length >= 2 && !isCommand(lines[0]) && lines.slice(1).every(isCommand)) {\n                    description = lines[0];\n                    commands = lines.slice(1);\n                }\n                else {\n                    return lines.map(line => formatIfCommand(line)).join('\\n');\n                }\n            }\n            else {\n                description = a.description;\n                commands = [a.command];\n            }\n            const multilineSeparator = this.config.platform === 'win32' ?\n                (this.config.shell.includes('powershell') ? '`' : '^') :\n                '\\\\';\n            // The command will be indented in the section, which is also indented\n            const finalIndentedSpacing = this.indentSpacing * 2;\n            const multilineCommands = commands.map(c => {\n                // First indent keeping room for escaped newlines\n                return this.indent(this.wrap(formatIfCommand(c), finalIndentedSpacing + 4))\n                    // Then add the escaped newline\n                    .split(POSSIBLE_LINE_FEED).join(` ${multilineSeparator}\\n  `);\n            }).join('\\n');\n            return `${this.wrap(description, finalIndentedSpacing)}\\n\\n${multilineCommands}`;\n        }).join('\\n\\n');\n        return body;\n    }\n    args(args) {\n        if (args.filter(a => a.description).length === 0)\n            return;\n        return args.map(a => {\n            const name = a.name.toUpperCase();\n            let description = a.description || '';\n            if (a.default)\n                description = `[default: ${a.default}] ${description}`;\n            if (a.options)\n                description = `(${a.options.join('|')}) ${description}`;\n            return [name, description ? dim(description) : undefined];\n        });\n    }\n    arg(arg) {\n        const name = arg.name.toUpperCase();\n        if (arg.required)\n            return `${name}`;\n        return `[${name}]`;\n    }\n    flagHelpLabel(flag, showOptions = false) {\n        let label = flag.helpLabel;\n        if (!label) {\n            const labels = [];\n            if (flag.char)\n                labels.push(`-${flag.char[0]}`);\n            if (flag.name) {\n                if (flag.type === 'boolean' && flag.allowNo) {\n                    labels.push(`--[no-]${flag.name.trim()}`);\n                }\n                else {\n                    labels.push(`--${flag.name.trim()}`);\n                }\n            }\n            label = labels.join(', ');\n        }\n        if (flag.type === 'option') {\n            let value = flag.helpValue || (this.opts.showFlagNameInTitle ? flag.name : '<value>');\n            if (!flag.helpValue && flag.options) {\n                value = showOptions || this.opts.showFlagOptionsInTitle ? `${flag.options.join('|')}` : '<option>';\n            }\n            if (flag.multiple)\n                value += '...';\n            if (!value.includes('|'))\n                value = underline(value);\n            label += `=${value}`;\n        }\n        return label;\n    }\n    flags(flags) {\n        if (flags.length === 0)\n            return;\n        return flags.map(flag => {\n            const left = this.flagHelpLabel(flag);\n            let right = flag.summary || flag.description || '';\n            if (flag.type === 'option' && flag.default) {\n                right = `[default: ${flag.default}] ${right}`;\n            }\n            if (flag.required)\n                right = `(required) ${right}`;\n            if (flag.type === 'option' && flag.options && !flag.helpValue && !this.opts.showFlagOptionsInTitle) {\n                right += `\\n<options: ${flag.options.join('|')}>`;\n            }\n            return [left, dim(right.trim())];\n        });\n    }\n    flagsDescriptions(flags) {\n        const flagsWithExtendedDescriptions = flags.filter(flag => flag.summary && flag.description);\n        if (flagsWithExtendedDescriptions.length === 0)\n            return;\n        const body = flagsWithExtendedDescriptions.map(flag => {\n            // Guaranteed to be set because of the filter above, but make ts happy\n            const summary = flag.summary || '';\n            let flagHelp = this.flagHelpLabel(flag, true);\n            flagHelp += flagHelp.length + summary.length + 2 < this.opts.maxWidth ? '  ' + summary : '\\n\\n' + this.indent(this.wrap(summary, this.indentSpacing * 2));\n            return `${flagHelp}\\n\\n${this.indent(this.wrap(flag.description || '', this.indentSpacing * 2))}`;\n        }).join('\\n\\n');\n        return body;\n    }\n}\nexports.CommandHelp = CommandHelp;\nexports.default = CommandHelp;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}