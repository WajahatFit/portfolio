{"ast":null,"code":"const _GenericBar = require('./generic-bar');\nconst _options = require('./options');\n\n// Progress-Bar constructor\nmodule.exports = class SingleBar extends _GenericBar {\n  constructor(options, preset) {\n    super(_options.parse(options, preset));\n\n    // the update timer\n    this.timer = null;\n\n    // disable synchronous updates in notty mode\n    if (this.options.noTTYOutput && this.terminal.isTTY() === false) {\n      this.options.synchronousUpdate = false;\n    }\n\n    // update interval\n    this.schedulingRate = this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule;\n\n    // callback used for gracefulExit\n    this.sigintCallback = null;\n  }\n\n  // internal render function\n  render() {\n    // stop timer\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n\n    // run internal rendering\n    super.render();\n\n    // add new line in notty mode!\n    if (this.options.noTTYOutput && this.terminal.isTTY() === false) {\n      this.terminal.newline();\n    }\n\n    // next update\n    this.timer = setTimeout(this.render.bind(this), this.schedulingRate);\n  }\n  update(current, payload) {\n    // timer inactive ?\n    if (!this.timer) {\n      return;\n    }\n    super.update(current, payload);\n\n    // trigger synchronous update ?\n    // check for throttle time \n    if (this.options.synchronousUpdate && this.lastRedraw + this.options.throttleTime * 2 < Date.now()) {\n      // force update\n      this.render();\n    }\n  }\n\n  // start the progress bar\n  start(total, startValue, payload) {\n    // progress updates are only visible in TTY mode!\n    if (this.options.noTTYOutput === false && this.terminal.isTTY() === false) {\n      return;\n    }\n\n    // add handler to restore cursor settings (stop the bar) on SIGINT/SIGTERM ?\n    if (this.sigintCallback === null && this.options.gracefulExit) {\n      this.sigintCallback = this.stop.bind(this);\n      process.once('SIGINT', this.sigintCallback);\n      process.once('SIGTERM', this.sigintCallback);\n    }\n\n    // save current cursor settings\n    this.terminal.cursorSave();\n\n    // hide the cursor ?\n    if (this.options.hideCursor === true) {\n      this.terminal.cursor(false);\n    }\n\n    // disable line wrapping ?\n    if (this.options.linewrap === false) {\n      this.terminal.lineWrapping(false);\n    }\n\n    // initialize bar\n    super.start(total, startValue, payload);\n\n    // redraw on start!\n    this.render();\n  }\n\n  // stop the bar\n  stop() {\n    // timer inactive ?\n    if (!this.timer) {\n      return;\n    }\n\n    // remove sigint listener\n    if (this.sigintCallback) {\n      process.removeListener('SIGINT', this.sigintCallback);\n      process.removeListener('SIGTERM', this.sigintCallback);\n      this.sigintCallback = null;\n    }\n\n    // trigger final rendering\n    this.render();\n\n    // restore state\n    super.stop();\n\n    // stop timer\n    clearTimeout(this.timer);\n    this.timer = null;\n\n    // cursor hidden ?\n    if (this.options.hideCursor === true) {\n      this.terminal.cursor(true);\n    }\n\n    // re-enable line wrapping ?\n    if (this.options.linewrap === false) {\n      this.terminal.lineWrapping(true);\n    }\n\n    // restore cursor on complete (position + settings)\n    this.terminal.cursorRestore();\n\n    // clear line on complete ?\n    if (this.options.clearOnComplete) {\n      this.terminal.cursorTo(0, null);\n      this.terminal.clearLine();\n    } else {\n      // new line on complete\n      this.terminal.newline();\n    }\n  }\n};","map":{"version":3,"names":["_GenericBar","require","_options","module","exports","SingleBar","constructor","options","preset","parse","timer","noTTYOutput","terminal","isTTY","synchronousUpdate","schedulingRate","throttleTime","notTTYSchedule","sigintCallback","render","clearTimeout","newline","setTimeout","bind","update","current","payload","lastRedraw","Date","now","start","total","startValue","gracefulExit","stop","process","once","cursorSave","hideCursor","cursor","linewrap","lineWrapping","removeListener","cursorRestore","clearOnComplete","cursorTo","clearLine"],"sources":["/Users/wajahatfit/Documents/labs/portfolio/portfolio/node_modules/cli-progress/lib/single-bar.js"],"sourcesContent":["const _GenericBar = require('./generic-bar');\nconst _options = require('./options');\n\n// Progress-Bar constructor\nmodule.exports = class SingleBar extends _GenericBar{\n\n    constructor(options, preset){\n        super(_options.parse(options, preset));\n\n        // the update timer\n        this.timer = null;\n\n        // disable synchronous updates in notty mode\n        if (this.options.noTTYOutput && this.terminal.isTTY() === false){\n            this.options.synchronousUpdate = false;\n        }\n\n        // update interval\n        this.schedulingRate = (this.terminal.isTTY() ? this.options.throttleTime : this.options.notTTYSchedule);\n\n        // callback used for gracefulExit\n        this.sigintCallback = null;\n    }\n\n    // internal render function\n    render(){\n        // stop timer\n        if (this.timer){\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n\n        // run internal rendering\n        super.render();\n\n        // add new line in notty mode!\n        if (this.options.noTTYOutput && this.terminal.isTTY() === false){\n            this.terminal.newline();\n        }\n\n        // next update\n        this.timer = setTimeout(this.render.bind(this), this.schedulingRate);\n    }\n\n    update(current, payload){\n        // timer inactive ?\n        if (!this.timer) {\n            return;\n        }\n\n        super.update(current, payload);\n\n        // trigger synchronous update ?\n        // check for throttle time \n        if (this.options.synchronousUpdate && (this.lastRedraw + this.options.throttleTime*2) < Date.now()){\n            // force update\n            this.render();\n        }\n    }\n\n    // start the progress bar\n    start(total, startValue, payload){\n        // progress updates are only visible in TTY mode!\n        if (this.options.noTTYOutput === false && this.terminal.isTTY() === false){\n            return;\n        }\n\n        // add handler to restore cursor settings (stop the bar) on SIGINT/SIGTERM ?\n        if (this.sigintCallback === null && this.options.gracefulExit){\n            this.sigintCallback = this.stop.bind(this);\n            process.once('SIGINT', this.sigintCallback);\n            process.once('SIGTERM', this.sigintCallback);\n        }\n\n        // save current cursor settings\n        this.terminal.cursorSave();\n\n        // hide the cursor ?\n        if (this.options.hideCursor === true){\n            this.terminal.cursor(false);\n        }\n\n        // disable line wrapping ?\n        if (this.options.linewrap === false){\n            this.terminal.lineWrapping(false);\n        }\n\n        // initialize bar\n        super.start(total, startValue, payload);\n\n        // redraw on start!\n        this.render();\n    }\n\n    // stop the bar\n    stop(){\n        // timer inactive ?\n        if (!this.timer) {\n            return;\n        }\n        \n        // remove sigint listener\n        if (this.sigintCallback){\n            process.removeListener('SIGINT', this.sigintCallback);\n            process.removeListener('SIGTERM', this.sigintCallback);\n            this.sigintCallback = null;\n        }\n\n        // trigger final rendering\n        this.render();\n\n        // restore state\n        super.stop();\n\n        // stop timer\n        clearTimeout(this.timer);\n        this.timer = null;\n\n        // cursor hidden ?\n        if (this.options.hideCursor === true){\n            this.terminal.cursor(true);\n        }\n\n        // re-enable line wrapping ?\n        if (this.options.linewrap === false){\n            this.terminal.lineWrapping(true);\n        }\n\n        // restore cursor on complete (position + settings)\n        this.terminal.cursorRestore();\n\n        // clear line on complete ?\n        if (this.options.clearOnComplete){\n            this.terminal.cursorTo(0, null);\n            this.terminal.clearLine();\n        }else{\n            // new line on complete\n            this.terminal.newline();\n        }\n    }\n}"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;;AAErC;AACAE,MAAM,CAACC,OAAO,GAAG,MAAMC,SAAS,SAASL,WAAW;EAEhDM,WAAW,CAACC,OAAO,EAAEC,MAAM,EAAC;IACxB,KAAK,CAACN,QAAQ,CAACO,KAAK,CAACF,OAAO,EAAEC,MAAM,CAAC,CAAC;;IAEtC;IACA,IAAI,CAACE,KAAK,GAAG,IAAI;;IAEjB;IACA,IAAI,IAAI,CAACH,OAAO,CAACI,WAAW,IAAI,IAAI,CAACC,QAAQ,CAACC,KAAK,EAAE,KAAK,KAAK,EAAC;MAC5D,IAAI,CAACN,OAAO,CAACO,iBAAiB,GAAG,KAAK;IAC1C;;IAEA;IACA,IAAI,CAACC,cAAc,GAAI,IAAI,CAACH,QAAQ,CAACC,KAAK,EAAE,GAAG,IAAI,CAACN,OAAO,CAACS,YAAY,GAAG,IAAI,CAACT,OAAO,CAACU,cAAe;;IAEvG;IACA,IAAI,CAACC,cAAc,GAAG,IAAI;EAC9B;;EAEA;EACAC,MAAM,GAAE;IACJ;IACA,IAAI,IAAI,CAACT,KAAK,EAAC;MACXU,YAAY,CAAC,IAAI,CAACV,KAAK,CAAC;MACxB,IAAI,CAACA,KAAK,GAAG,IAAI;IACrB;;IAEA;IACA,KAAK,CAACS,MAAM,EAAE;;IAEd;IACA,IAAI,IAAI,CAACZ,OAAO,CAACI,WAAW,IAAI,IAAI,CAACC,QAAQ,CAACC,KAAK,EAAE,KAAK,KAAK,EAAC;MAC5D,IAAI,CAACD,QAAQ,CAACS,OAAO,EAAE;IAC3B;;IAEA;IACA,IAAI,CAACX,KAAK,GAAGY,UAAU,CAAC,IAAI,CAACH,MAAM,CAACI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACR,cAAc,CAAC;EACxE;EAEAS,MAAM,CAACC,OAAO,EAAEC,OAAO,EAAC;IACpB;IACA,IAAI,CAAC,IAAI,CAAChB,KAAK,EAAE;MACb;IACJ;IAEA,KAAK,CAACc,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC;;IAE9B;IACA;IACA,IAAI,IAAI,CAACnB,OAAO,CAACO,iBAAiB,IAAK,IAAI,CAACa,UAAU,GAAG,IAAI,CAACpB,OAAO,CAACS,YAAY,GAAC,CAAC,GAAIY,IAAI,CAACC,GAAG,EAAE,EAAC;MAC/F;MACA,IAAI,CAACV,MAAM,EAAE;IACjB;EACJ;;EAEA;EACAW,KAAK,CAACC,KAAK,EAAEC,UAAU,EAAEN,OAAO,EAAC;IAC7B;IACA,IAAI,IAAI,CAACnB,OAAO,CAACI,WAAW,KAAK,KAAK,IAAI,IAAI,CAACC,QAAQ,CAACC,KAAK,EAAE,KAAK,KAAK,EAAC;MACtE;IACJ;;IAEA;IACA,IAAI,IAAI,CAACK,cAAc,KAAK,IAAI,IAAI,IAAI,CAACX,OAAO,CAAC0B,YAAY,EAAC;MAC1D,IAAI,CAACf,cAAc,GAAG,IAAI,CAACgB,IAAI,CAACX,IAAI,CAAC,IAAI,CAAC;MAC1CY,OAAO,CAACC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAClB,cAAc,CAAC;MAC3CiB,OAAO,CAACC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAClB,cAAc,CAAC;IAChD;;IAEA;IACA,IAAI,CAACN,QAAQ,CAACyB,UAAU,EAAE;;IAE1B;IACA,IAAI,IAAI,CAAC9B,OAAO,CAAC+B,UAAU,KAAK,IAAI,EAAC;MACjC,IAAI,CAAC1B,QAAQ,CAAC2B,MAAM,CAAC,KAAK,CAAC;IAC/B;;IAEA;IACA,IAAI,IAAI,CAAChC,OAAO,CAACiC,QAAQ,KAAK,KAAK,EAAC;MAChC,IAAI,CAAC5B,QAAQ,CAAC6B,YAAY,CAAC,KAAK,CAAC;IACrC;;IAEA;IACA,KAAK,CAACX,KAAK,CAACC,KAAK,EAAEC,UAAU,EAAEN,OAAO,CAAC;;IAEvC;IACA,IAAI,CAACP,MAAM,EAAE;EACjB;;EAEA;EACAe,IAAI,GAAE;IACF;IACA,IAAI,CAAC,IAAI,CAACxB,KAAK,EAAE;MACb;IACJ;;IAEA;IACA,IAAI,IAAI,CAACQ,cAAc,EAAC;MACpBiB,OAAO,CAACO,cAAc,CAAC,QAAQ,EAAE,IAAI,CAACxB,cAAc,CAAC;MACrDiB,OAAO,CAACO,cAAc,CAAC,SAAS,EAAE,IAAI,CAACxB,cAAc,CAAC;MACtD,IAAI,CAACA,cAAc,GAAG,IAAI;IAC9B;;IAEA;IACA,IAAI,CAACC,MAAM,EAAE;;IAEb;IACA,KAAK,CAACe,IAAI,EAAE;;IAEZ;IACAd,YAAY,CAAC,IAAI,CAACV,KAAK,CAAC;IACxB,IAAI,CAACA,KAAK,GAAG,IAAI;;IAEjB;IACA,IAAI,IAAI,CAACH,OAAO,CAAC+B,UAAU,KAAK,IAAI,EAAC;MACjC,IAAI,CAAC1B,QAAQ,CAAC2B,MAAM,CAAC,IAAI,CAAC;IAC9B;;IAEA;IACA,IAAI,IAAI,CAAChC,OAAO,CAACiC,QAAQ,KAAK,KAAK,EAAC;MAChC,IAAI,CAAC5B,QAAQ,CAAC6B,YAAY,CAAC,IAAI,CAAC;IACpC;;IAEA;IACA,IAAI,CAAC7B,QAAQ,CAAC+B,aAAa,EAAE;;IAE7B;IACA,IAAI,IAAI,CAACpC,OAAO,CAACqC,eAAe,EAAC;MAC7B,IAAI,CAAChC,QAAQ,CAACiC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC;MAC/B,IAAI,CAACjC,QAAQ,CAACkC,SAAS,EAAE;IAC7B,CAAC,MAAI;MACD;MACA,IAAI,CAAClC,QAAQ,CAACS,OAAO,EAAE;IAC3B;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"script"}