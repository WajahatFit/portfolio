{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tree = void 0;\nconst treeify = require('object-treeify');\nclass Tree {\n  constructor() {\n    this.nodes = {};\n  }\n  insert(child) {\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Tree();\n    this.nodes[child] = value;\n    return this;\n  }\n  search(key) {\n    for (const child of Object.keys(this.nodes)) {\n      if (child === key) {\n        return this.nodes[child];\n      }\n      const c = this.nodes[child].search(key);\n      if (c) return c;\n    }\n  }\n  // tslint:disable-next-line:no-console\n  display() {\n    let logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : console.log;\n    const addNodes = function (nodes) {\n      const tree = {};\n      for (const p of Object.keys(nodes)) {\n        tree[p] = addNodes(nodes[p].nodes);\n      }\n      return tree;\n    };\n    const tree = addNodes(this.nodes);\n    logger(treeify(tree));\n  }\n}\nexports.Tree = Tree;\nfunction tree() {\n  return new Tree();\n}\nexports.default = tree;","map":{"version":3,"names":["Object","defineProperty","exports","value","Tree","treeify","require","constructor","nodes","insert","child","search","key","keys","c","display","logger","console","log","addNodes","tree","p","default"],"sources":["/Users/wajahatfit/Documents/labs/portfolio/portfolio/node_modules/@oclif/core/lib/cli-ux/styled/tree.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tree = void 0;\nconst treeify = require('object-treeify');\nclass Tree {\n    constructor() {\n        this.nodes = {};\n    }\n    insert(child, value = new Tree()) {\n        this.nodes[child] = value;\n        return this;\n    }\n    search(key) {\n        for (const child of Object.keys(this.nodes)) {\n            if (child === key) {\n                return this.nodes[child];\n            }\n            const c = this.nodes[child].search(key);\n            if (c)\n                return c;\n        }\n    }\n    // tslint:disable-next-line:no-console\n    display(logger = console.log) {\n        const addNodes = function (nodes) {\n            const tree = {};\n            for (const p of Object.keys(nodes)) {\n                tree[p] = addNodes(nodes[p].nodes);\n            }\n            return tree;\n        };\n        const tree = addNodes(this.nodes);\n        logger(treeify(tree));\n    }\n}\nexports.Tree = Tree;\nfunction tree() {\n    return new Tree();\n}\nexports.default = tree;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,IAAI,GAAG,KAAK,CAAC;AACrB,MAAMC,OAAO,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAMF,IAAI,CAAC;EACPG,WAAW,GAAG;IACV,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;EACnB;EACAC,MAAM,CAACC,KAAK,EAAsB;IAAA,IAApBP,KAAK,uEAAG,IAAIC,IAAI,EAAE;IAC5B,IAAI,CAACI,KAAK,CAACE,KAAK,CAAC,GAAGP,KAAK;IACzB,OAAO,IAAI;EACf;EACAQ,MAAM,CAACC,GAAG,EAAE;IACR,KAAK,MAAMF,KAAK,IAAIV,MAAM,CAACa,IAAI,CAAC,IAAI,CAACL,KAAK,CAAC,EAAE;MACzC,IAAIE,KAAK,KAAKE,GAAG,EAAE;QACf,OAAO,IAAI,CAACJ,KAAK,CAACE,KAAK,CAAC;MAC5B;MACA,MAAMI,CAAC,GAAG,IAAI,CAACN,KAAK,CAACE,KAAK,CAAC,CAACC,MAAM,CAACC,GAAG,CAAC;MACvC,IAAIE,CAAC,EACD,OAAOA,CAAC;IAChB;EACJ;EACA;EACAC,OAAO,GAAuB;IAAA,IAAtBC,MAAM,uEAAGC,OAAO,CAACC,GAAG;IACxB,MAAMC,QAAQ,GAAG,UAAUX,KAAK,EAAE;MAC9B,MAAMY,IAAI,GAAG,CAAC,CAAC;MACf,KAAK,MAAMC,CAAC,IAAIrB,MAAM,CAACa,IAAI,CAACL,KAAK,CAAC,EAAE;QAChCY,IAAI,CAACC,CAAC,CAAC,GAAGF,QAAQ,CAACX,KAAK,CAACa,CAAC,CAAC,CAACb,KAAK,CAAC;MACtC;MACA,OAAOY,IAAI;IACf,CAAC;IACD,MAAMA,IAAI,GAAGD,QAAQ,CAAC,IAAI,CAACX,KAAK,CAAC;IACjCQ,MAAM,CAACX,OAAO,CAACe,IAAI,CAAC,CAAC;EACzB;AACJ;AACAlB,OAAO,CAACE,IAAI,GAAGA,IAAI;AACnB,SAASgB,IAAI,GAAG;EACZ,OAAO,IAAIhB,IAAI,EAAE;AACrB;AACAF,OAAO,CAACoB,OAAO,GAAGF,IAAI"},"metadata":{},"sourceType":"script"}