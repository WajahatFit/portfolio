{"ast":null,"code":"'use strict';\n\nconst fs = require('../fs');\nconst path = require('path');\nconst util = require('util');\nconst atLeastNode = require('at-least-node');\nconst nodeSupportsBigInt = atLeastNode('10.5.0');\nconst stat = file => nodeSupportsBigInt ? fs.stat(file, {\n  bigint: true\n}) : fs.stat(file);\nconst statSync = file => nodeSupportsBigInt ? fs.statSync(file, {\n  bigint: true\n}) : fs.statSync(file);\nfunction getStats(src, dest) {\n  return Promise.all([stat(src), stat(dest).catch(err => {\n    if (err.code === 'ENOENT') return null;\n    throw err;\n  })]).then(_ref => {\n    let [srcStat, destStat] = _ref;\n    return {\n      srcStat,\n      destStat\n    };\n  });\n}\nfunction getStatsSync(src, dest) {\n  let destStat;\n  const srcStat = statSync(src);\n  try {\n    destStat = statSync(dest);\n  } catch (err) {\n    if (err.code === 'ENOENT') return {\n      srcStat,\n      destStat: null\n    };\n    throw err;\n  }\n  return {\n    srcStat,\n    destStat\n  };\n}\nfunction checkPaths(src, dest, funcName, cb) {\n  util.callbackify(getStats)(src, dest, (err, stats) => {\n    if (err) return cb(err);\n    const {\n      srcStat,\n      destStat\n    } = stats;\n    if (destStat && areIdentical(srcStat, destStat)) {\n      return cb(new Error('Source and destination must not be the same.'));\n    }\n    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n      return cb(new Error(errMsg(src, dest, funcName)));\n    }\n    return cb(null, {\n      srcStat,\n      destStat\n    });\n  });\n}\nfunction checkPathsSync(src, dest, funcName) {\n  const {\n    srcStat,\n    destStat\n  } = getStatsSync(src, dest);\n  if (destStat && areIdentical(srcStat, destStat)) {\n    throw new Error('Source and destination must not be the same.');\n  }\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n  return {\n    srcStat,\n    destStat\n  };\n}\n\n// recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\nfunction checkParentPaths(src, srcStat, dest, funcName, cb) {\n  const srcParent = path.resolve(path.dirname(src));\n  const destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return cb();\n  const callback = (err, destStat) => {\n    if (err) {\n      if (err.code === 'ENOENT') return cb();\n      return cb(err);\n    }\n    if (areIdentical(srcStat, destStat)) {\n      return cb(new Error(errMsg(src, dest, funcName)));\n    }\n    return checkParentPaths(src, srcStat, destParent, funcName, cb);\n  };\n  if (nodeSupportsBigInt) fs.stat(destParent, {\n    bigint: true\n  }, callback);else fs.stat(destParent, callback);\n}\nfunction checkParentPathsSync(src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src));\n  const destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return;\n  let destStat;\n  try {\n    destStat = statSync(destParent);\n  } catch (err) {\n    if (err.code === 'ENOENT') return;\n    throw err;\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n  return checkParentPathsSync(src, srcStat, destParent, funcName);\n}\nfunction areIdentical(srcStat, destStat) {\n  if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n    if (nodeSupportsBigInt || destStat.ino < Number.MAX_SAFE_INTEGER) {\n      // definitive answer\n      return true;\n    }\n    // Use additional heuristics if we can't use 'bigint'.\n    // Different 'ino' could be represented the same if they are >= Number.MAX_SAFE_INTEGER\n    // See issue 657\n    if (destStat.size === srcStat.size && destStat.mode === srcStat.mode && destStat.nlink === srcStat.nlink && destStat.atimeMs === srcStat.atimeMs && destStat.mtimeMs === srcStat.mtimeMs && destStat.ctimeMs === srcStat.ctimeMs && destStat.birthtimeMs === srcStat.birthtimeMs) {\n      // heuristic answer\n      return true;\n    }\n  }\n  return false;\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\nfunction isSrcSubdir(src, dest) {\n  const srcArr = path.resolve(src).split(path.sep).filter(i => i);\n  const destArr = path.resolve(dest).split(path.sep).filter(i => i);\n  return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);\n}\nfunction errMsg(src, dest, funcName) {\n  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;\n}\nmodule.exports = {\n  checkPaths,\n  checkPathsSync,\n  checkParentPaths,\n  checkParentPathsSync,\n  isSrcSubdir\n};","map":{"version":3,"names":["fs","require","path","util","atLeastNode","nodeSupportsBigInt","stat","file","bigint","statSync","getStats","src","dest","Promise","all","catch","err","code","then","srcStat","destStat","getStatsSync","checkPaths","funcName","cb","callbackify","stats","areIdentical","Error","isDirectory","isSrcSubdir","errMsg","checkPathsSync","checkParentPaths","srcParent","resolve","dirname","destParent","parse","root","callback","checkParentPathsSync","ino","dev","Number","MAX_SAFE_INTEGER","size","mode","nlink","atimeMs","mtimeMs","ctimeMs","birthtimeMs","srcArr","split","sep","filter","i","destArr","reduce","acc","cur","module","exports"],"sources":["/Users/wajahatfit/Documents/labs/portfolio/portfolio/node_modules/@oclif/core/node_modules/fs-extra/lib/util/stat.js"],"sourcesContent":["'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst util = require('util')\nconst atLeastNode = require('at-least-node')\n\nconst nodeSupportsBigInt = atLeastNode('10.5.0')\nconst stat = (file) => nodeSupportsBigInt ? fs.stat(file, { bigint: true }) : fs.stat(file)\nconst statSync = (file) => nodeSupportsBigInt ? fs.statSync(file, { bigint: true }) : fs.statSync(file)\n\nfunction getStats (src, dest) {\n  return Promise.all([\n    stat(src),\n    stat(dest).catch(err => {\n      if (err.code === 'ENOENT') return null\n      throw err\n    })\n  ]).then(([srcStat, destStat]) => ({ srcStat, destStat }))\n}\n\nfunction getStatsSync (src, dest) {\n  let destStat\n  const srcStat = statSync(src)\n  try {\n    destStat = statSync(dest)\n  } catch (err) {\n    if (err.code === 'ENOENT') return { srcStat, destStat: null }\n    throw err\n  }\n  return { srcStat, destStat }\n}\n\nfunction checkPaths (src, dest, funcName, cb) {\n  util.callbackify(getStats)(src, dest, (err, stats) => {\n    if (err) return cb(err)\n    const { srcStat, destStat } = stats\n    if (destStat && areIdentical(srcStat, destStat)) {\n      return cb(new Error('Source and destination must not be the same.'))\n    }\n    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n      return cb(new Error(errMsg(src, dest, funcName)))\n    }\n    return cb(null, { srcStat, destStat })\n  })\n}\n\nfunction checkPathsSync (src, dest, funcName) {\n  const { srcStat, destStat } = getStatsSync(src, dest)\n  if (destStat && areIdentical(srcStat, destStat)) {\n    throw new Error('Source and destination must not be the same.')\n  }\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return { srcStat, destStat }\n}\n\n// recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\nfunction checkParentPaths (src, srcStat, dest, funcName, cb) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return cb()\n  const callback = (err, destStat) => {\n    if (err) {\n      if (err.code === 'ENOENT') return cb()\n      return cb(err)\n    }\n    if (areIdentical(srcStat, destStat)) {\n      return cb(new Error(errMsg(src, dest, funcName)))\n    }\n    return checkParentPaths(src, srcStat, destParent, funcName, cb)\n  }\n  if (nodeSupportsBigInt) fs.stat(destParent, { bigint: true }, callback)\n  else fs.stat(destParent, callback)\n}\n\nfunction checkParentPathsSync (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n  let destStat\n  try {\n    destStat = statSync(destParent)\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return checkParentPathsSync(src, srcStat, destParent, funcName)\n}\n\nfunction areIdentical (srcStat, destStat) {\n  if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n    if (nodeSupportsBigInt || destStat.ino < Number.MAX_SAFE_INTEGER) {\n      // definitive answer\n      return true\n    }\n    // Use additional heuristics if we can't use 'bigint'.\n    // Different 'ino' could be represented the same if they are >= Number.MAX_SAFE_INTEGER\n    // See issue 657\n    if (destStat.size === srcStat.size &&\n        destStat.mode === srcStat.mode &&\n        destStat.nlink === srcStat.nlink &&\n        destStat.atimeMs === srcStat.atimeMs &&\n        destStat.mtimeMs === srcStat.mtimeMs &&\n        destStat.ctimeMs === srcStat.ctimeMs &&\n        destStat.birthtimeMs === srcStat.birthtimeMs) {\n      // heuristic answer\n      return true\n    }\n  }\n  return false\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\nfunction isSrcSubdir (src, dest) {\n  const srcArr = path.resolve(src).split(path.sep).filter(i => i)\n  const destArr = path.resolve(dest).split(path.sep).filter(i => i)\n  return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true)\n}\n\nfunction errMsg (src, dest, funcName) {\n  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`\n}\n\nmodule.exports = {\n  checkPaths,\n  checkPathsSync,\n  checkParentPaths,\n  checkParentPathsSync,\n  isSrcSubdir\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}