{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.collectUsableIds = exports.getCommandIdPermutations = exports.getPermutations = exports.Debug = exports.uniq = exports.compact = exports.loadJSON = exports.resolvePackage = exports.exists = exports.mapValues = exports.flatMap = void 0;\nconst fs = require(\"fs\");\nconst debug = require('debug');\nfunction flatMap(arr, fn) {\n  return arr.reduce((arr, i) => arr.concat(fn(i)), []);\n}\nexports.flatMap = flatMap;\nfunction mapValues(obj, fn) {\n  return Object.entries(obj).reduce((o, _ref) => {\n    let [k, v] = _ref;\n    o[k] = fn(v, k);\n    return o;\n  }, {});\n}\nexports.mapValues = mapValues;\nfunction exists(path) {\n  // eslint-disable-next-line no-promise-executor-return\n  return new Promise(resolve => resolve(fs.existsSync(path)));\n}\nexports.exists = exists;\nfunction resolvePackage(id, paths) {\n  return require.resolve(id, paths);\n}\nexports.resolvePackage = resolvePackage;\nfunction loadJSON(path) {\n  debug('config')('loadJSON %s', path);\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, 'utf8', (err, d) => {\n      try {\n        if (err) reject(err);else resolve(JSON.parse(d));\n      } catch (error) {\n        reject(error);\n      }\n    });\n  });\n}\nexports.loadJSON = loadJSON;\nfunction compact(a) {\n  return a.filter(a => Boolean(a));\n}\nexports.compact = compact;\nfunction uniq(arr) {\n  return [...new Set(arr)].sort();\n}\nexports.uniq = uniq;\nfunction displayWarnings() {\n  if (process.listenerCount('warning') > 1) return;\n  process.on('warning', warning => {\n    console.error(warning.stack);\n    if (warning.detail) console.error(warning.detail);\n  });\n}\nfunction Debug() {\n  if (!debug) return function () {};\n  for (var _len = arguments.length, scope = new Array(_len), _key = 0; _key < _len; _key++) {\n    scope[_key] = arguments[_key];\n  }\n  const d = debug(['config', ...scope].join(':'));\n  if (d.enabled) displayWarnings();\n  return function () {\n    return d(...arguments);\n  };\n}\nexports.Debug = Debug;\n// Adapted from https://github.com/angus-c/just/blob/master/packages/array-permutations/index.js\nfunction getPermutations(arr) {\n  if (arr.length === 0) return [];\n  if (arr.length === 1) return [arr];\n  const output = [];\n  const partialPermutations = getPermutations(arr.slice(1));\n  const first = arr[0];\n  for (let i = 0, len = partialPermutations.length; i < len; i++) {\n    const partial = partialPermutations[i];\n    for (let j = 0, len2 = partial.length; j <= len2; j++) {\n      const start = partial.slice(0, j);\n      const end = partial.slice(j);\n      const merged = start.concat(first, end);\n      output.push(merged);\n    }\n  }\n  return output;\n}\nexports.getPermutations = getPermutations;\nfunction getCommandIdPermutations(commandId) {\n  return getPermutations(commandId.split(':')).flatMap(c => c.join(':'));\n}\nexports.getCommandIdPermutations = getCommandIdPermutations;\n/**\n * Return an array of ids that represent all the usable combinations that a user could enter.\n *\n * For example, if the command ids are:\n * - foo:bar:baz\n * - one:two:three\n * Then the usable ids would be:\n * - foo\n * - foo:bar\n * - foo:bar:baz\n * - one\n * - one:two\n * - one:two:three\n *\n * This allows us to determine which parts of the argv array belong to the command id whenever the topicSeparator is a space.\n *\n * @param commandIds string[]\n * @returns string[]\n */\nfunction collectUsableIds(commandIds) {\n  const usuableIds = [];\n  for (const id of commandIds) {\n    const parts = id.split(':');\n    while (parts.length > 0) {\n      const name = parts.join(':');\n      if (name) usuableIds.push(name);\n      parts.pop();\n    }\n  }\n  return uniq(usuableIds).sort();\n}\nexports.collectUsableIds = collectUsableIds;","map":{"version":3,"names":["Object","defineProperty","exports","value","collectUsableIds","getCommandIdPermutations","getPermutations","Debug","uniq","compact","loadJSON","resolvePackage","exists","mapValues","flatMap","fs","require","debug","arr","fn","reduce","i","concat","obj","entries","o","k","v","path","Promise","resolve","existsSync","id","paths","reject","readFile","err","d","JSON","parse","error","a","filter","Boolean","Set","sort","displayWarnings","process","listenerCount","on","warning","console","stack","detail","scope","join","enabled","length","output","partialPermutations","slice","first","len","partial","j","len2","start","end","merged","push","commandId","split","c","commandIds","usuableIds","parts","name","pop"],"sources":["/Users/wajahatfit/Documents/labs/portfolio/portfolio/node_modules/@oclif/core/lib/config/util.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.collectUsableIds = exports.getCommandIdPermutations = exports.getPermutations = exports.Debug = exports.uniq = exports.compact = exports.loadJSON = exports.resolvePackage = exports.exists = exports.mapValues = exports.flatMap = void 0;\nconst fs = require(\"fs\");\nconst debug = require('debug');\nfunction flatMap(arr, fn) {\n    return arr.reduce((arr, i) => arr.concat(fn(i)), []);\n}\nexports.flatMap = flatMap;\nfunction mapValues(obj, fn) {\n    return Object.entries(obj)\n        .reduce((o, [k, v]) => {\n        o[k] = fn(v, k);\n        return o;\n    }, {});\n}\nexports.mapValues = mapValues;\nfunction exists(path) {\n    // eslint-disable-next-line no-promise-executor-return\n    return new Promise(resolve => resolve(fs.existsSync(path)));\n}\nexports.exists = exists;\nfunction resolvePackage(id, paths) {\n    return require.resolve(id, paths);\n}\nexports.resolvePackage = resolvePackage;\nfunction loadJSON(path) {\n    debug('config')('loadJSON %s', path);\n    return new Promise((resolve, reject) => {\n        fs.readFile(path, 'utf8', (err, d) => {\n            try {\n                if (err)\n                    reject(err);\n                else\n                    resolve(JSON.parse(d));\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    });\n}\nexports.loadJSON = loadJSON;\nfunction compact(a) {\n    return a.filter((a) => Boolean(a));\n}\nexports.compact = compact;\nfunction uniq(arr) {\n    return [...new Set(arr)].sort();\n}\nexports.uniq = uniq;\nfunction displayWarnings() {\n    if (process.listenerCount('warning') > 1)\n        return;\n    process.on('warning', (warning) => {\n        console.error(warning.stack);\n        if (warning.detail)\n            console.error(warning.detail);\n    });\n}\nfunction Debug(...scope) {\n    if (!debug)\n        return (..._) => { };\n    const d = debug(['config', ...scope].join(':'));\n    if (d.enabled)\n        displayWarnings();\n    return (...args) => d(...args);\n}\nexports.Debug = Debug;\n// Adapted from https://github.com/angus-c/just/blob/master/packages/array-permutations/index.js\nfunction getPermutations(arr) {\n    if (arr.length === 0)\n        return [];\n    if (arr.length === 1)\n        return [arr];\n    const output = [];\n    const partialPermutations = getPermutations(arr.slice(1));\n    const first = arr[0];\n    for (let i = 0, len = partialPermutations.length; i < len; i++) {\n        const partial = partialPermutations[i];\n        for (let j = 0, len2 = partial.length; j <= len2; j++) {\n            const start = partial.slice(0, j);\n            const end = partial.slice(j);\n            const merged = start.concat(first, end);\n            output.push(merged);\n        }\n    }\n    return output;\n}\nexports.getPermutations = getPermutations;\nfunction getCommandIdPermutations(commandId) {\n    return getPermutations(commandId.split(':')).flatMap(c => c.join(':'));\n}\nexports.getCommandIdPermutations = getCommandIdPermutations;\n/**\n * Return an array of ids that represent all the usable combinations that a user could enter.\n *\n * For example, if the command ids are:\n * - foo:bar:baz\n * - one:two:three\n * Then the usable ids would be:\n * - foo\n * - foo:bar\n * - foo:bar:baz\n * - one\n * - one:two\n * - one:two:three\n *\n * This allows us to determine which parts of the argv array belong to the command id whenever the topicSeparator is a space.\n *\n * @param commandIds string[]\n * @returns string[]\n */\nfunction collectUsableIds(commandIds) {\n    const usuableIds = [];\n    for (const id of commandIds) {\n        const parts = id.split(':');\n        while (parts.length > 0) {\n            const name = parts.join(':');\n            if (name)\n                usuableIds.push(name);\n            parts.pop();\n        }\n    }\n    return uniq(usuableIds).sort();\n}\nexports.collectUsableIds = collectUsableIds;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}