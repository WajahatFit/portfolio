{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActionBase = void 0;\nconst util_1 = require(\"util\");\nconst util_2 = require(\"../../util\");\nclass ActionBase {\n  constructor() {\n    this.std = 'stderr';\n    this.stdmockOrigs = {\n      stdout: process.stdout.write,\n      stderr: process.stderr.write\n    };\n  }\n  start(action, status) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.std = opts.stdout ? 'stdout' : 'stderr';\n    const task = {\n      action,\n      status,\n      active: Boolean(this.task && this.task.active)\n    };\n    this.task = task;\n    this._start();\n    task.active = true;\n    this._stdout(true);\n  }\n  stop() {\n    let msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'done';\n    const task = this.task;\n    if (!task) {\n      return;\n    }\n    this._stop(msg);\n    task.active = false;\n    this.task = undefined;\n    this._stdout(false);\n  }\n  get globals() {\n    global['cli-ux'] = global['cli-ux'] || {};\n    const globals = global['cli-ux'];\n    globals.action = globals.action || {};\n    return globals;\n  }\n  get task() {\n    return this.globals.action.task;\n  }\n  set task(task) {\n    this.globals.action.task = task;\n  }\n  get output() {\n    return this.globals.output;\n  }\n  set output(output) {\n    this.globals.output = output;\n  }\n  get running() {\n    return Boolean(this.task);\n  }\n  get status() {\n    return this.task ? this.task.status : undefined;\n  }\n  set status(status) {\n    const task = this.task;\n    if (!task) {\n      return;\n    }\n    if (task.status === status) {\n      return;\n    }\n    this._updateStatus(status, task.status);\n    task.status = status;\n  }\n  async pauseAsync(fn, icon) {\n    const task = this.task;\n    const active = task && task.active;\n    if (task && active) {\n      this._pause(icon);\n      this._stdout(false);\n      task.active = false;\n    }\n    const ret = await fn();\n    if (task && active) {\n      this._resume();\n    }\n    return ret;\n  }\n  pause(fn, icon) {\n    const task = this.task;\n    const active = task && task.active;\n    if (task && active) {\n      this._pause(icon);\n      this._stdout(false);\n      task.active = false;\n    }\n    const ret = fn();\n    if (task && active) {\n      this._resume();\n    }\n    return ret;\n  }\n  _start() {\n    throw new Error('not implemented');\n  }\n  _stop(_) {\n    throw new Error('not implemented');\n  }\n  _resume() {\n    if (this.task) this.start(this.task.action, this.task.status);\n  }\n  _pause(_) {\n    throw new Error('not implemented');\n  }\n  _updateStatus(_, __) {}\n  // mock out stdout/stderr so it doesn't screw up the rendering\n  _stdout(toggle) {\n    var _this = this;\n    try {\n      const outputs = ['stdout', 'stderr'];\n      if (toggle) {\n        if (this.stdmocks) return;\n        this.stdmockOrigs = {\n          stdout: process.stdout.write,\n          stderr: process.stderr.write\n        };\n        this.stdmocks = [];\n        for (const std of outputs) {\n          process[std].write = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            _this.stdmocks.push([std, args]);\n          };\n        }\n      } else {\n        if (!this.stdmocks) return;\n        // this._write('stderr', '\\nresetstdmock\\n\\n\\n')\n        delete this.stdmocks;\n        for (const std of outputs) process[std].write = this.stdmockOrigs[std];\n      }\n    } catch (error) {\n      this._write('stderr', (0, util_1.inspect)(error));\n    }\n  }\n  // flush mocked stdout/stderr\n  _flushStdout() {\n    try {\n      let output = '';\n      let std;\n      while (this.stdmocks && this.stdmocks.length > 0) {\n        const cur = this.stdmocks.shift();\n        std = cur[0];\n        this._write(std, cur[1]);\n        output += cur[1][0].toString('utf8');\n      }\n      // add newline if there isn't one already\n      // otherwise we'll just overwrite it when we render\n      if (output && std && output[output.length - 1] !== '\\n') {\n        this._write(std, '\\n');\n      }\n    } catch (error) {\n      this._write('stderr', (0, util_1.inspect)(error));\n    }\n  }\n  // write to the real stdout/stderr\n  _write(std, s) {\n    this.stdmockOrigs[std].apply(process[std], (0, util_2.castArray)(s));\n  }\n}\nexports.ActionBase = ActionBase;","map":{"version":3,"names":["Object","defineProperty","exports","value","ActionBase","util_1","require","util_2","constructor","std","stdmockOrigs","stdout","process","write","stderr","start","action","status","opts","task","active","Boolean","_start","_stdout","stop","msg","_stop","undefined","globals","global","output","running","_updateStatus","pauseAsync","fn","icon","_pause","ret","_resume","pause","Error","_","__","toggle","outputs","stdmocks","args","push","error","_write","inspect","_flushStdout","length","cur","shift","toString","s","apply","castArray"],"sources":["/Users/wajahatfit/Documents/labs/portfolio/portfolio/node_modules/@oclif/core/lib/cli-ux/action/base.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActionBase = void 0;\nconst util_1 = require(\"util\");\nconst util_2 = require(\"../../util\");\nclass ActionBase {\n    constructor() {\n        this.std = 'stderr';\n        this.stdmockOrigs = {\n            stdout: process.stdout.write,\n            stderr: process.stderr.write,\n        };\n    }\n    start(action, status, opts = {}) {\n        this.std = opts.stdout ? 'stdout' : 'stderr';\n        const task = { action, status, active: Boolean(this.task && this.task.active) };\n        this.task = task;\n        this._start();\n        task.active = true;\n        this._stdout(true);\n    }\n    stop(msg = 'done') {\n        const task = this.task;\n        if (!task) {\n            return;\n        }\n        this._stop(msg);\n        task.active = false;\n        this.task = undefined;\n        this._stdout(false);\n    }\n    get globals() {\n        global['cli-ux'] = global['cli-ux'] || {};\n        const globals = global['cli-ux'];\n        globals.action = globals.action || {};\n        return globals;\n    }\n    get task() {\n        return this.globals.action.task;\n    }\n    set task(task) {\n        this.globals.action.task = task;\n    }\n    get output() {\n        return this.globals.output;\n    }\n    set output(output) {\n        this.globals.output = output;\n    }\n    get running() {\n        return Boolean(this.task);\n    }\n    get status() {\n        return this.task ? this.task.status : undefined;\n    }\n    set status(status) {\n        const task = this.task;\n        if (!task) {\n            return;\n        }\n        if (task.status === status) {\n            return;\n        }\n        this._updateStatus(status, task.status);\n        task.status = status;\n    }\n    async pauseAsync(fn, icon) {\n        const task = this.task;\n        const active = task && task.active;\n        if (task && active) {\n            this._pause(icon);\n            this._stdout(false);\n            task.active = false;\n        }\n        const ret = await fn();\n        if (task && active) {\n            this._resume();\n        }\n        return ret;\n    }\n    pause(fn, icon) {\n        const task = this.task;\n        const active = task && task.active;\n        if (task && active) {\n            this._pause(icon);\n            this._stdout(false);\n            task.active = false;\n        }\n        const ret = fn();\n        if (task && active) {\n            this._resume();\n        }\n        return ret;\n    }\n    _start() {\n        throw new Error('not implemented');\n    }\n    _stop(_) {\n        throw new Error('not implemented');\n    }\n    _resume() {\n        if (this.task)\n            this.start(this.task.action, this.task.status);\n    }\n    _pause(_) {\n        throw new Error('not implemented');\n    }\n    _updateStatus(_, __) { }\n    // mock out stdout/stderr so it doesn't screw up the rendering\n    _stdout(toggle) {\n        try {\n            const outputs = ['stdout', 'stderr'];\n            if (toggle) {\n                if (this.stdmocks)\n                    return;\n                this.stdmockOrigs = {\n                    stdout: process.stdout.write,\n                    stderr: process.stderr.write,\n                };\n                this.stdmocks = [];\n                for (const std of outputs) {\n                    process[std].write = (...args) => {\n                        this.stdmocks.push([std, args]);\n                    };\n                }\n            }\n            else {\n                if (!this.stdmocks)\n                    return;\n                // this._write('stderr', '\\nresetstdmock\\n\\n\\n')\n                delete this.stdmocks;\n                for (const std of outputs)\n                    process[std].write = this.stdmockOrigs[std];\n            }\n        }\n        catch (error) {\n            this._write('stderr', (0, util_1.inspect)(error));\n        }\n    }\n    // flush mocked stdout/stderr\n    _flushStdout() {\n        try {\n            let output = '';\n            let std;\n            while (this.stdmocks && this.stdmocks.length > 0) {\n                const cur = this.stdmocks.shift();\n                std = cur[0];\n                this._write(std, cur[1]);\n                output += cur[1][0].toString('utf8');\n            }\n            // add newline if there isn't one already\n            // otherwise we'll just overwrite it when we render\n            if (output && std && output[output.length - 1] !== '\\n') {\n                this._write(std, '\\n');\n            }\n        }\n        catch (error) {\n            this._write('stderr', (0, util_1.inspect)(error));\n        }\n    }\n    // write to the real stdout/stderr\n    _write(std, s) {\n        this.stdmockOrigs[std].apply(process[std], (0, util_2.castArray)(s));\n    }\n}\nexports.ActionBase = ActionBase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}