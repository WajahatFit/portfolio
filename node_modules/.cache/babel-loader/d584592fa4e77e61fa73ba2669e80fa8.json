{"ast":null,"code":"\"use strict\";\n\n// eslint-disable-next-line no-console\nconst assert = console.assert;\nconst buildCtx = opts => {\n  const ctx = {\n    joined: true,\n    spacerNoNeighbour: '   ',\n    spacerNeighbour: '│  ',\n    keyNoNeighbour: '└─ ',\n    keyNeighbour: '├─ ',\n    sortFn: null,\n    ...opts\n  };\n  assert(Object.keys(ctx).length === 6, 'Unexpected Option(s) provided');\n  assert(typeof ctx.joined === 'boolean', 'Option \"joined\" has invalid format');\n  assert(typeof ctx.spacerNoNeighbour === 'string', 'Option \"spacerNoNeighbour\" has invalid format');\n  assert(typeof ctx.spacerNeighbour === 'string', 'Option \"spacerNeighbour\" has invalid format');\n  assert(typeof ctx.keyNoNeighbour === 'string', 'Option \"keyNoNeighbour\" has invalid format');\n  assert(typeof ctx.keyNeighbour === 'string', 'Option \"keyNeighbour\" has invalid format');\n  assert(typeof ctx.sortFn === 'function' || ctx.sortFn === null, 'Option \"sortFn\" has invalid format');\n  return ctx;\n};\nmodule.exports = function (tree) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const ctx = buildCtx(opts);\n  const result = [];\n  const sort = input => ctx.sortFn === null ? input.reverse() : input.sort((a, b) => ctx.sortFn(b, a));\n  const neighbours = [];\n  const keys = sort(Object.keys(tree)).map(k => [k]);\n  const lookup = [tree];\n  while (keys.length !== 0) {\n    const key = keys.pop();\n    const node = lookup[key.length - 1][key[key.length - 1]];\n    neighbours[key.length - 1] = keys.length !== 0 && keys[keys.length - 1].length === key.length;\n    result.push([neighbours.slice(0, key.length - 1).map(n => n ? ctx.spacerNeighbour : ctx.spacerNoNeighbour).join(''), neighbours[key.length - 1] ? ctx.keyNeighbour : ctx.keyNoNeighbour, key[key.length - 1], ['boolean', 'string', 'number'].includes(typeof node) ? `: ${node}` : ''].join(''));\n    if (node instanceof Object && !Array.isArray(node)) {\n      keys.push(...sort(Object.keys(node)).map(k => key.concat(k)));\n      lookup[key.length] = node;\n    }\n  }\n  return ctx.joined === true ? result.join('\\n') : result;\n};","map":{"version":3,"names":["assert","console","buildCtx","opts","ctx","joined","spacerNoNeighbour","spacerNeighbour","keyNoNeighbour","keyNeighbour","sortFn","Object","keys","length","module","exports","tree","result","sort","input","reverse","a","b","neighbours","map","k","lookup","key","pop","node","push","slice","n","join","includes","Array","isArray","concat"],"sources":["/Users/wajahatfit/Documents/labs/portfolio/portfolio/node_modules/object-treeify/lib/index.js"],"sourcesContent":["\"use strict\";\n\n// eslint-disable-next-line no-console\nconst assert = console.assert;\n\nconst buildCtx = opts => {\n  const ctx = {\n    joined: true,\n    spacerNoNeighbour: '   ',\n    spacerNeighbour: '│  ',\n    keyNoNeighbour: '└─ ',\n    keyNeighbour: '├─ ',\n    sortFn: null,\n    ...opts\n  };\n  assert(Object.keys(ctx).length === 6, 'Unexpected Option(s) provided');\n  assert(typeof ctx.joined === 'boolean', 'Option \"joined\" has invalid format');\n  assert(typeof ctx.spacerNoNeighbour === 'string', 'Option \"spacerNoNeighbour\" has invalid format');\n  assert(typeof ctx.spacerNeighbour === 'string', 'Option \"spacerNeighbour\" has invalid format');\n  assert(typeof ctx.keyNoNeighbour === 'string', 'Option \"keyNoNeighbour\" has invalid format');\n  assert(typeof ctx.keyNeighbour === 'string', 'Option \"keyNeighbour\" has invalid format');\n  assert(typeof ctx.sortFn === 'function' || ctx.sortFn === null, 'Option \"sortFn\" has invalid format');\n  return ctx;\n};\n\nmodule.exports = (tree, opts = {}) => {\n  const ctx = buildCtx(opts);\n  const result = [];\n\n  const sort = input => ctx.sortFn === null ? input.reverse() : input.sort((a, b) => ctx.sortFn(b, a));\n\n  const neighbours = [];\n  const keys = sort(Object.keys(tree)).map(k => [k]);\n  const lookup = [tree];\n\n  while (keys.length !== 0) {\n    const key = keys.pop();\n    const node = lookup[key.length - 1][key[key.length - 1]];\n    neighbours[key.length - 1] = keys.length !== 0 && keys[keys.length - 1].length === key.length;\n    result.push([neighbours.slice(0, key.length - 1).map(n => n ? ctx.spacerNeighbour : ctx.spacerNoNeighbour).join(''), neighbours[key.length - 1] ? ctx.keyNeighbour : ctx.keyNoNeighbour, key[key.length - 1], ['boolean', 'string', 'number'].includes(typeof node) ? `: ${node}` : ''].join(''));\n\n    if (node instanceof Object && !Array.isArray(node)) {\n      keys.push(...sort(Object.keys(node)).map(k => key.concat(k)));\n      lookup[key.length] = node;\n    }\n  }\n\n  return ctx.joined === true ? result.join('\\n') : result;\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}