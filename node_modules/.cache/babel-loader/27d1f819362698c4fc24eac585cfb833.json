{"ast":null,"code":"'use strict';\n\nconst stdin = process.stdin;\nconst stderr = process.stderr;\nlet read = {\n  hide: function (ask) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return read.raw(ask, false, options);\n  },\n  mask: function (ask) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return read.raw(ask, true, options);\n  },\n  raw: function (ask, maskAfter) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // masking isn't available without setRawMode\n    if (!stdin.setRawMode || process.env.TERM === 'dumb') return read.notty(ask);\n    return new Promise(function (resolve, reject) {\n      const ansi = require('ansi-escapes');\n      let input = '';\n      stderr.write(ansi.eraseLine);\n      stderr.write(ansi.cursorLeft);\n      stderr.write(ask);\n      stdin.resume();\n      stdin.setRawMode(true);\n      function stop() {\n        if (maskAfter) {\n          stderr.write(ansi.cursorHide + ansi.cursorLeft + ask + input.replace(/./g, '*') + '\\n' + ansi.cursorShow);\n        } else {\n          stderr.write('\\n');\n        }\n        stdin.removeListener('data', fn);\n        stdin.setRawMode(false);\n        stdin.pause();\n      }\n      function enter() {\n        if (options.required && input.length === 0) return;\n        stop();\n        input = input.replace(/\\r$/, '');\n        input = input || options.default;\n        resolve(input);\n      }\n      function ctrlc() {\n        reject(new Error('SIGINT'));\n        stop();\n      }\n      function backspace() {\n        if (input.length === 0) return;\n        input = input.substr(0, input.length - 1);\n        stderr.write(ansi.cursorBackward(1));\n        stderr.write(ansi.eraseEndLine);\n      }\n      function newchar(c) {\n        input += c;\n        stderr.write(maskAfter ? c : '*'.repeat(c.length));\n      }\n      let fn = function (c) {\n        switch (c) {\n          case '\\u0004': // Ctrl-d\n          case '\\r':\n          case '\\n':\n            return enter();\n          case '\\u0003':\n            // Ctrl-c\n            return ctrlc();\n          default:\n            // backspace\n            if (c.charCodeAt(0) === 127) return backspace();else return newchar(c);\n        }\n      };\n      stdin.on('data', fn);\n    });\n  },\n  notty: ask => {\n    return new Promise((resolve, reject) => {\n      const spawn = require('cross-spawn');\n      stderr.write(ask);\n      let output = spawn.sync('sh', ['-c', 'read -s PASS && echo $PASS'], {\n        stdio: ['inherit', 'pipe', 'inherit'],\n        encoding: 'utf8'\n      });\n      stderr.write('\\n');\n      if (output.error) return reject(output.error);\n      resolve(output.stdout.trim());\n    });\n  }\n};\n\n/**\n * prompt -- Prompt for a password\n * @module password-prompt\n * @example\n * let prompt = require('password-prompt')\n * let password = prompt('password: ')\n * // password: ******\n * @param {string} [ask] - prompt output\n * @param {Object} [options]\n * @param {string} [options.method=mask] - mask or hide\n * @returns {Promise<string>} input from user\n */\nfunction prompt(ask) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = Object.assign({\n    method: 'mask',\n    required: options.default === undefined,\n    default: ''\n  }, options);\n  stdin.setEncoding('utf8');\n  return read[options.method](ask, options).then(input => input || (options.required ? prompt(ask) : ''));\n}\nmodule.exports = prompt;","map":{"version":3,"names":["stdin","process","stderr","read","hide","ask","options","raw","mask","maskAfter","setRawMode","env","TERM","notty","Promise","resolve","reject","ansi","require","input","write","eraseLine","cursorLeft","resume","stop","cursorHide","replace","cursorShow","removeListener","fn","pause","enter","required","length","default","ctrlc","Error","backspace","substr","cursorBackward","eraseEndLine","newchar","c","repeat","charCodeAt","on","spawn","output","sync","stdio","encoding","error","stdout","trim","prompt","Object","assign","method","undefined","setEncoding","then","module","exports"],"sources":["/Users/wajahatfit/Documents/labs/portfolio/portfolio/node_modules/password-prompt/index.js"],"sourcesContent":["'use strict'\n\nconst stdin = process.stdin\nconst stderr = process.stderr\n\nlet read = {\n  hide: (ask, options = {}) => read.raw(ask, false, options),\n  mask: (ask, options = {}) => read.raw(ask, true, options),\n  raw: (ask, maskAfter, options = {}) => {\n    // masking isn't available without setRawMode\n    if (!stdin.setRawMode || process.env.TERM === 'dumb') return read.notty(ask)\n    return new Promise(function (resolve, reject) {\n      const ansi = require('ansi-escapes')\n\n      let input = ''\n      stderr.write(ansi.eraseLine)\n      stderr.write(ansi.cursorLeft)\n      stderr.write(ask)\n      stdin.resume()\n      stdin.setRawMode(true)\n\n      function stop () {\n        if (maskAfter) {\n          stderr.write(ansi.cursorHide + ansi.cursorLeft + ask + input.replace(/./g, '*') + '\\n' + ansi.cursorShow)\n        } else {\n          stderr.write('\\n')\n        }\n        stdin.removeListener('data', fn)\n        stdin.setRawMode(false)\n        stdin.pause()\n      }\n\n      function enter () {\n        if (options.required && input.length === 0) return\n        stop()\n        input = input.replace(/\\r$/, '')\n        input = input || options.default\n        resolve(input)\n      }\n\n      function ctrlc () {\n        reject(new Error('SIGINT'))\n        stop()\n      }\n\n      function backspace () {\n        if (input.length === 0) return\n        input = input.substr(0, input.length - 1)\n        stderr.write(ansi.cursorBackward(1))\n        stderr.write(ansi.eraseEndLine)\n      }\n\n      function newchar (c) {\n        input += c\n        stderr.write(maskAfter ? c : '*'.repeat(c.length))\n      }\n\n      let fn = function (c) {\n        switch (c) {\n          case '\\u0004': // Ctrl-d\n          case '\\r':\n          case '\\n':\n            return enter()\n          case '\\u0003': // Ctrl-c\n            return ctrlc()\n          default:\n            // backspace\n            if (c.charCodeAt(0) === 127) return backspace()\n            else return newchar(c)\n        }\n      }\n      stdin.on('data', fn)\n    })\n  },\n  notty: ask => {\n    return new Promise((resolve, reject) => {\n      const spawn = require('cross-spawn')\n      stderr.write(ask)\n      let output = spawn.sync('sh', ['-c', 'read -s PASS && echo $PASS'], {\n        stdio: ['inherit', 'pipe', 'inherit'],\n        encoding: 'utf8'\n      })\n      stderr.write('\\n')\n      if (output.error) return reject(output.error)\n      resolve(output.stdout.trim())\n    })\n  }\n}\n\n/**\n * prompt -- Prompt for a password\n * @module password-prompt\n * @example\n * let prompt = require('password-prompt')\n * let password = prompt('password: ')\n * // password: ******\n * @param {string} [ask] - prompt output\n * @param {Object} [options]\n * @param {string} [options.method=mask] - mask or hide\n * @returns {Promise<string>} input from user\n */\nfunction prompt (ask, options = {}) {\n  options = Object.assign(\n    {\n      method: 'mask',\n      required: options.default === undefined,\n      default: ''\n    },\n    options\n  )\n  stdin.setEncoding('utf8')\n  return read[options.method](ask, options).then(input => input || (options.required ? prompt(ask) : ''))\n}\n\nmodule.exports = prompt\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}