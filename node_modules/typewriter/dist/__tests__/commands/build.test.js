"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const node_crypto_1 = tslib_1.__importDefault(require("node:crypto"));
const node_fs_1 = tslib_1.__importDefault(require("node:fs"));
const node_path_1 = tslib_1.__importDefault(require("node:path"));
const config_1 = require("../../config");
const oclif_runner_1 = require("../__helpers__/oclif-runner");
const TEST_ENV_PATH = "./test-env";
/**
 * Sets up an environment for a test by creating the right directories, config files and copying the tracking plan
 */
const setupEnv = async (basePath, language, sdk, trackingPlanFile = "./src/__tests__/__data__/plan.json", id = "tp_2CJh7O9XUIirKFn4pabvhz8Cn9K", outputPath = "./", legacyID) => {
    const hash = node_crypto_1.default
        .createHash("sha256")
        .update(trackingPlanFile)
        .update(id)
        .update(outputPath)
        .update(legacyID !== null && legacyID !== void 0 ? legacyID : "")
        .digest("hex");
    const testPath = node_path_1.default.join(basePath, language, sdk, hash);
    if (node_fs_1.default.existsSync(testPath)) {
        node_fs_1.default.rmSync(testPath, { recursive: true, force: true });
    }
    node_fs_1.default.mkdirSync(testPath, { recursive: true });
    await (0, config_1.saveWorkspaceConfig)({
        client: {
            language,
            sdk,
        },
        trackingPlans: [
            {
                name: "Test",
                id,
                path: outputPath,
                legacyID,
            },
        ],
    }, testPath);
    node_fs_1.default.copyFileSync(trackingPlanFile, node_path_1.default.join(testPath, "plan.json"));
    return testPath;
};
describe("build", () => {
    const configurations = [
        // Basic tests
        ["typescript", "analytics-node", "segment.ts"],
        ["javascript", "analytics-node", "segment.js"],
        ["typescript", "analytics-js", "segment.ts"],
        ["swift", "swift", "segment.swift"],
        ["typescript", "analytics-react-native", "segment.tsx"],
        ["kotlin", "kotlin", "segment.kt"],
        // V1 tests, compatibility tests
        [
            "typescript",
            "analytics-node",
            "segment.ts",
            "./src/__tests__/__data__/plan-v1.json",
            "rs_2CJh7QUSFvjOlQEvvxzpTt8x48X",
        ],
        // Soft-migration, where we store the legacyID in the file for faster access
        [
            "typescript",
            "analytics-node",
            "segment.ts",
            "./src/__tests__/__data__/plan-v1.json",
            "tp_2CJh7O9XUIirKFn4pabvhz8Cn9K",
            "./",
            "rs_2CJh7QUSFvjOlQEvvxzpTt8x48X",
        ],
    ];
    for (const config of configurations) {
        const [language, sdk, filename, plan, id, outputPath, legacyId] = config;
        it(`builds client Language: ${language}, SDK:${sdk}`, async () => {
            const testPath = await setupEnv(TEST_ENV_PATH, language, sdk, plan, id, outputPath, legacyId);
            await (0, oclif_runner_1.run)(["build", "-c", testPath]);
            expect(node_fs_1.default.readFileSync(node_path_1.default.join(testPath, filename), {
                encoding: "utf-8",
            })).toMatchSnapshot();
        });
    }
});
